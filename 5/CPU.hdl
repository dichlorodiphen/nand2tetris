// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // C-instruction
    Mux16(a=a-out, b=inM, sel=instruction[12], out=alu-input2);
    ALU(x=d-out, y=alu-input2, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=outM, out=a-in-cinstruc, out=d-in, zr=alu-zr, ng=alu-ng);
    
    // Store computation based on instruction[3..5] if C-instruction
    And(a=instruction[3], b=instruction[15], out=writeM);
    And(a=instruction[4], b=true, out=d-load);
    And(a=instruction[5], b=true, out=a-load-cinstruc);

    // A-instruction
    Not(in=instruction[15], out=is-a-instruction);
    Or(a=a-load-cinstruc, b=is-a-instruction, out=a-load);
    Mux16(a=a-in-cinstruc, b=instruction, sel=is-a-instruction, out=a-in);

    // Registers
    ARegister(in=a-in, load=a-load, out=a-out, out[0..14]=addressM);
    DRegister(in=d-in, load=d-load, out=d-out);

    // Program counter
    Or(a=alu-zr, b=alu-ng, out=zr-or-ng);
    Not(in=zr-or-ng, out=alu-gt);

    And(a=alu-gt, b=instruction[0], out=j0);
    And(a=alu-zr, b=instruction[1], out=j1);
    And(a=alu-ng, b=instruction[2], out=j2);

    Or(a=j0, b=j1, out=j01);
    Or(a=j01, b=j2, out=j012);
    And(a=j012, b=instruction[15], out=should-jump);

    PC(in=a-out, inc=true, load=should-jump, reset=reset, out[0..14]=pc);
}
